// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'package:dryice/dryice.dart' as prefix0;
import 'resources/test_module.dart' as prefix1;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_transformer_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" show isTransformed;

final _data = {
  const prefix0.InjectAnnotation(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"MyClassToInject",
            r"test.resources.MyClassToInject",
            7,
            0,
            const prefix0.InjectAnnotation(),
            const <int>[0, 1, 2, 3, 4, 5, 6, 14, 29, 30, 31],
            const <int>[
              32,
              33,
              34,
              35,
              36,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30
            ],
            const <int>[],
            -1,
            {},
            {},
            {
              r"namedCTOR": (b) => (constructorParameterToInject) => b
                  ? new prefix1.MyClassToInject.namedCTOR(
                      constructorParameterToInject)
                  : null
            },
            0,
            0,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MyClass",
            r"test.resources.MyClass",
            7,
            1,
            const prefix0.InjectAnnotation(),
            const <int>[37, 38],
            const <int>[32, 33, 34, 35, 36, 37],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.MyClass() : null},
            0,
            1,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MyOtherClass",
            r"test.resources.MyOtherClass",
            7,
            2,
            const prefix0.InjectAnnotation(),
            const <int>[39, 40],
            const <int>[32, 33, 34, 35, 36, 39],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.MyOtherClass() : null},
            0,
            2,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MySpecialClass",
            r"test.resources.MySpecialClass",
            7,
            3,
            const prefix0.InjectAnnotation(),
            const <int>[41, 42],
            const <int>[32, 33, 34, 35, 36, 41],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.MySpecialClass() : null},
            0,
            3,
            const <int>[1],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"YourClass",
            r"test.resources.YourClass",
            7,
            4,
            const prefix0.InjectAnnotation(),
            const <int>[43, 44],
            const <int>[32, 33, 34, 35, 36, 43],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.YourClass() : null},
            0,
            4,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MySingletonClass",
            r"test.resources.MySingletonClass",
            7,
            5,
            const prefix0.InjectAnnotation(),
            const <int>[7, 8, 45, 49],
            const <int>[32, 33, 34, 35, 36, 45, 48],
            const <int>[46, 47],
            -1,
            {
              r"instanceCounter": () => prefix1.MySingletonClass.instanceCounter
            },
            {
              r"instanceCounter=": (value) =>
                  prefix1.MySingletonClass.instanceCounter = value
            },
            {r"": (b) => () => b ? new prefix1.MySingletonClass() : null},
            0,
            5,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MySpecialSingletonClass",
            r"test.resources.MySpecialSingletonClass",
            7,
            6,
            const prefix0.InjectAnnotation(),
            const <int>[50, 51],
            const <int>[32, 33, 34, 35, 36, 50, 48],
            const <int>[],
            5,
            {},
            {},
            {
              r"": (b) => () => b ? new prefix1.MySpecialSingletonClass() : null
            },
            0,
            6,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MySpecialSingletonClass2",
            r"test.resources.MySpecialSingletonClass2",
            7,
            7,
            const prefix0.InjectAnnotation(),
            const <int>[52, 53],
            const <int>[32, 33, 34, 35, 36, 52, 48],
            const <int>[],
            5,
            {},
            {},
            {
              r"": (b) =>
                  () => b ? new prefix1.MySpecialSingletonClass2() : null
            },
            0,
            7,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"AnotherSingletonClass",
            r"test.resources.AnotherSingletonClass",
            7,
            8,
            const prefix0.InjectAnnotation(),
            const <int>[54, 55],
            const <int>[32, 33, 34, 35, 36, 54],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.AnotherSingletonClass() : null},
            0,
            8,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MetaTestClass",
            r"test.resources.MetaTestClass",
            7,
            9,
            const prefix0.InjectAnnotation(),
            const <int>[56, 57],
            const <int>[32, 33, 34, 35, 36, 56],
            const <int>[],
            1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.MetaTestClass() : null},
            0,
            9,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"CTORInjection",
            r"test.resources.CTORInjection",
            7,
            10,
            const prefix0.InjectAnnotation(),
            const <int>[9, 10, 58, 61],
            const <int>[32, 33, 34, 35, 36, 58, 59, 60],
            const <int>[],
            1,
            {},
            {},
            {
              r"": (b) => (url, language) =>
                  b ? new prefix1.CTORInjection(url, language) : null
            },
            0,
            10,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"CTOROptionalInjection",
            r"test.resources.CTOROptionalInjection",
            7,
            11,
            const prefix0.InjectAnnotation(),
            const <int>[11, 12, 62, 65],
            const <int>[32, 33, 34, 35, 36, 62, 63, 64],
            const <int>[],
            1,
            {},
            {},
            {
              r"": (b) => (url, [language]) =>
                  b ? new prefix1.CTOROptionalInjection(url, language) : null
            },
            0,
            11,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"UrlGoogle",
            r"test.resources.UrlGoogle",
            7,
            12,
            const prefix0.InjectAnnotation(),
            const <int>[66],
            const <int>[32, 33, 34, 35, 36],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.UrlGoogle() : null},
            0,
            12,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"UrlFacebook",
            r"test.resources.UrlFacebook",
            7,
            13,
            const prefix0.InjectAnnotation(),
            const <int>[67],
            const <int>[32, 33, 34, 35, 36],
            const <int>[],
            -1,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.UrlFacebook() : null},
            0,
            13,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"MyStoreClass",
            r"test.resources.MyStoreClass",
            7,
            14,
            const prefix0.InjectAnnotation(),
            const <int>[68],
            const <int>[32, 33, 34, 35, 36, 37],
            const <int>[],
            16,
            {},
            {},
            {r"": (b) => () => b ? new prefix1.MyStoreClass() : null},
            0,
            14,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"CTORInjectionWithDefaultParam",
            r"test.resources.CTORInjectionWithDefaultParam",
            7,
            15,
            const prefix0.InjectAnnotation(),
            const <int>[13, 69, 71],
            const <int>[32, 33, 34, 35, 36, 69, 70],
            const <int>[],
            1,
            {},
            {},
            {
              r"": (b) => ({language: "Java"}) => b
                  ? new prefix1.CTORInjectionWithDefaultParam(
                      language: language)
                  : null
            },
            0,
            15,
            const <int>[],
            const <Object>[prefix0.inject],
            null),
        new r.NonGenericClassMirrorImpl(
            r"test.resources.MyClass with test.resources.IAmAMixin",
            r"test.resources.test.resources.MyClass with test.resources.IAmAMixin",
            583,
            16,
            const prefix0.InjectAnnotation(),
            const <int>[],
            const <int>[32, 33, 34, 35, 36, 37],
            const <int>[],
            1,
            const {},
            const {},
            const {},
            0,
            -1,
            const <int>[],
            const [],
            null)
      ],
      <m.DeclarationMirror>[
        new r.VariableMirrorImpl(
            r"variableToInject",
            32773,
            0,
            const prefix0.InjectAnnotation(),
            1,
            1,
            1,
            const <Object>[prefix0.inject]),
        new r.VariableMirrorImpl(r"variableNotToInject", 32773, 0,
            const prefix0.InjectAnnotation(), 1, 1, 1, const <Object>[]),
        new r.VariableMirrorImpl(r"namedVariableToInject", 32773, 0,
            const prefix0.InjectAnnotation(), 1, 1, 1, const <Object>[
          prefix0.inject,
          const prefix0.Named("MySpecialClass")
        ]),
        new r.VariableMirrorImpl(r"injections", 2129925, 0,
            const prefix0.InjectAnnotation(), -1, 17, 18, const <Object>[]),
        new r.VariableMirrorImpl(
            r"url1",
            32773,
            0,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[prefix0.inject, const prefix0.Named("google")]),
        new r.VariableMirrorImpl(
            r"url2",
            32773,
            0,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[prefix0.inject, const prefix1.UrlGoogle()]),
        new r.VariableMirrorImpl(
            r"url3",
            32773,
            0,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[prefix0.inject, const prefix1.UrlFacebook()]),
        new r.VariableMirrorImpl(r"instanceCounter", 32789, 5,
            const prefix0.InjectAnnotation(), -1, 20, 20, const <Object>[]),
        new r.VariableMirrorImpl(r"instanceID", 33797, 5,
            const prefix0.InjectAnnotation(), -1, 20, 20, const <Object>[]),
        new r.VariableMirrorImpl(r"url", 33797, 10,
            const prefix0.InjectAnnotation(), -1, 19, 19, const <Object>[]),
        new r.VariableMirrorImpl(r"lang", 33797, 10,
            const prefix0.InjectAnnotation(), -1, 19, 19, const <Object>[]),
        new r.VariableMirrorImpl(r"url", 33797, 11,
            const prefix0.InjectAnnotation(), -1, 19, 19, const <Object>[]),
        new r.VariableMirrorImpl(r"lang", 33797, 11,
            const prefix0.InjectAnnotation(), -1, 19, 19, const <Object>[]),
        new r.VariableMirrorImpl(r"lang", 33797, 15,
            const prefix0.InjectAnnotation(), -1, 19, 19, const <Object>[]),
        new r.MethodMirrorImpl(r"assertInjections", 131074, 0, -1, 21, 21,
            const <int>[], const prefix0.InjectAnnotation(), const <Object>[]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 0, 1, 1, 15),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 0, 1, 1, 16),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 1, 1, 1, 17),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 1, 1, 1, 18),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 2, 1, 1, 19),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 2, 1, 1, 20),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 3, 17, 18, 21),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 3, 17, 18, 22),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 4, 19, 19, 23),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 4, 19, 19, 24),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 5, 19, 19, 25),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 5, 19, 19, 26),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 6, 19, 19, 27),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 6, 19, 19, 28),
        new r.MethodMirrorImpl(
            r"setterToInject=",
            65540,
            0,
            null,
            null,
            null,
            const <int>[8],
            const prefix0.InjectAnnotation(),
            const <Object>[prefix0.inject]),
        new r.MethodMirrorImpl(
            r"setterNotToInject=",
            65540,
            0,
            null,
            null,
            null,
            const <int>[9],
            const prefix0.InjectAnnotation(),
            const <Object>[]),
        new r.MethodMirrorImpl(r"namedCTOR", 0, 0, -1, 0, 0, const <int>[0],
            const prefix0.InjectAnnotation(), const <Object>[prefix0.inject]),
        new r.MethodMirrorImpl(r"==", 131074, null, -1, 21, 21, const <int>[10],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"toString", 131074, null, -1, 19, 19,
            const <int>[], const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(
            r"noSuchMethod",
            65538,
            null,
            null,
            null,
            null,
            const <int>[11],
            const prefix0.InjectAnnotation(),
            const <Object>[]),
        new r.MethodMirrorImpl(r"hashCode", 131075, null, -1, 20, 20,
            const <int>[], const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"runtimeType", 131075, null, -1, 22, 22,
            const <int>[], const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"getName", 131074, 1, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 1, -1, 1, 1, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 2, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 2, -1, 2, 2, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 3, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 3, -1, 3, 3, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 4, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 4, -1, 4, 4, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 5, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 7, 20, 20, 46),
        new r.ImplicitSetterMirrorImpl(
            const prefix0.InjectAnnotation(), 7, 20, 20, 47),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 8, 20, 20, 48),
        new r.MethodMirrorImpl(r"", 0, 5, -1, 5, 5, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"getName", 131074, 6, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 6, -1, 6, 6, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 7, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 7, -1, 7, 7, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 8, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 8, -1, 8, 8, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(r"getName", 131074, 9, -1, 19, 19, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 9, -1, 9, 9, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(
            r"getName",
            131074,
            10,
            -1,
            19,
            19,
            const <int>[],
            const prefix0.InjectAnnotation(),
            const <Object>[override]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 9, 19, 19, 59),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 10, 19, 19, 60),
        new r.MethodMirrorImpl(r"", 0, 10, -1, 10, 10, const <int>[13, 14],
            const prefix0.InjectAnnotation(), const <Object>[prefix0.inject]),
        new r.MethodMirrorImpl(
            r"getName",
            131074,
            11,
            -1,
            19,
            19,
            const <int>[],
            const prefix0.InjectAnnotation(),
            const <Object>[override]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 11, 19, 19, 63),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 12, 19, 19, 64),
        new r.MethodMirrorImpl(r"", 0, 11, -1, 11, 11, const <int>[15, 16],
            const prefix0.InjectAnnotation(), const <Object>[prefix0.inject]),
        new r.MethodMirrorImpl(r"", 128, 12, -1, 12, 12, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 128, 13, -1, 13, 13, const <int>[],
            const prefix0.InjectAnnotation(), const <Object>[]),
        new r.MethodMirrorImpl(r"", 64, 14, -1, 14, 14, const <int>[],
            const prefix0.InjectAnnotation(), const []),
        new r.MethodMirrorImpl(
            r"getName",
            131074,
            15,
            -1,
            19,
            19,
            const <int>[],
            const prefix0.InjectAnnotation(),
            const <Object>[override]),
        new r.ImplicitGetterMirrorImpl(
            const prefix0.InjectAnnotation(), 13, 19, 19, 70),
        new r.MethodMirrorImpl(r"", 0, 15, -1, 15, 15, const <int>[17],
            const prefix0.InjectAnnotation(), const <Object>[prefix0.inject])
      ],
      <m.ParameterMirror>[
        new r.ParameterMirrorImpl(
            r"constructorParameterToInject",
            32774,
            31,
            const prefix0.InjectAnnotation(),
            1,
            1,
            1,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(r"_variableToInject", 32870, 16,
            const prefix0.InjectAnnotation(), 1, 1, 1, const [], null, null),
        new r.ParameterMirrorImpl(r"_variableNotToInject", 32870, 18,
            const prefix0.InjectAnnotation(), 1, 1, 1, const [], null, null),
        new r.ParameterMirrorImpl(r"_namedVariableToInject", 32870, 20,
            const prefix0.InjectAnnotation(), 1, 1, 1, const [], null, null),
        new r.ParameterMirrorImpl(r"_injections", 2130022, 22,
            const prefix0.InjectAnnotation(), -1, 17, 18, const [], null, null),
        new r.ParameterMirrorImpl(r"_url1", 32870, 24,
            const prefix0.InjectAnnotation(), -1, 19, 19, const [], null, null),
        new r.ParameterMirrorImpl(r"_url2", 32870, 26,
            const prefix0.InjectAnnotation(), -1, 19, 19, const [], null, null),
        new r.ParameterMirrorImpl(r"_url3", 32870, 28,
            const prefix0.InjectAnnotation(), -1, 19, 19, const [], null, null),
        new r.ParameterMirrorImpl(
            r"setterToInject",
            32774,
            29,
            const prefix0.InjectAnnotation(),
            1,
            1,
            1,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"setterNotToInject",
            32774,
            30,
            const prefix0.InjectAnnotation(),
            1,
            1,
            1,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"other",
            16390,
            32,
            const prefix0.InjectAnnotation(),
            null,
            null,
            null,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"invocation",
            32774,
            34,
            const prefix0.InjectAnnotation(),
            -1,
            23,
            23,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(r"_instanceCounter", 32870, 47,
            const prefix0.InjectAnnotation(), -1, 20, 20, const [], null, null),
        new r.ParameterMirrorImpl(
            r"url",
            33798,
            61,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[const prefix1.UrlGoogle()],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"language",
            33798,
            61,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[const prefix0.Named("language")],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"url",
            33798,
            65,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[const prefix1.UrlGoogle()],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"language",
            37894,
            65,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[],
            null,
            null),
        new r.ParameterMirrorImpl(
            r"language",
            48134,
            71,
            const prefix0.InjectAnnotation(),
            -1,
            19,
            19,
            const <Object>[],
            "Java",
            #language)
      ],
      <Type>[
        prefix1.MyClassToInject,
        prefix1.MyClass,
        prefix1.MyOtherClass,
        prefix1.MySpecialClass,
        prefix1.YourClass,
        prefix1.MySingletonClass,
        prefix1.MySpecialSingletonClass,
        prefix1.MySpecialSingletonClass2,
        prefix1.AnotherSingletonClass,
        prefix1.MetaTestClass,
        prefix1.CTORInjection,
        prefix1.CTOROptionalInjection,
        prefix1.UrlGoogle,
        prefix1.UrlFacebook,
        prefix1.MyStoreClass,
        prefix1.CTORInjectionWithDefaultParam,
        const r.FakeType(
            r"test.resources.test.resources.MyClass with test.resources.IAmAMixin"),
        const m.TypeValue<Map<dynamic, dynamic>>().type,
        Map,
        String,
        int,
        bool,
        Type,
        Invocation
      ],
      17,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"assertInjections": (dynamic instance) => instance.assertInjections,
        r"variableToInject": (dynamic instance) => instance.variableToInject,
        r"variableNotToInject": (dynamic instance) =>
            instance.variableNotToInject,
        r"namedVariableToInject": (dynamic instance) =>
            instance.namedVariableToInject,
        r"injections": (dynamic instance) => instance.injections,
        r"url1": (dynamic instance) => instance.url1,
        r"url2": (dynamic instance) => instance.url2,
        r"url3": (dynamic instance) => instance.url3,
        r"getName": (dynamic instance) => instance.getName,
        r"instanceID": (dynamic instance) => instance.instanceID,
        r"url": (dynamic instance) => instance.url,
        r"lang": (dynamic instance) => instance.lang
      },
      {
        r"variableToInject=": (dynamic instance, value) =>
            instance.variableToInject = value,
        r"variableNotToInject=": (dynamic instance, value) =>
            instance.variableNotToInject = value,
        r"namedVariableToInject=": (dynamic instance, value) =>
            instance.namedVariableToInject = value,
        r"injections=": (dynamic instance, value) =>
            instance.injections = value,
        r"url1=": (dynamic instance, value) => instance.url1 = value,
        r"url2=": (dynamic instance, value) => instance.url2 = value,
        r"url3=": (dynamic instance, value) => instance.url3 = value,
        r"setterToInject=": (dynamic instance, value) =>
            instance.setterToInject = value,
        r"setterNotToInject=": (dynamic instance, value) =>
            instance.setterNotToInject = value
      },
      <m.LibraryMirror>[
        new r.LibraryMirrorImpl(
            r"test.resources",
            Uri.parse(r"reflectable://0/test.resources"),
            const prefix0.InjectAnnotation(),
            const <int>[],
            {},
            {},
            const <Object>[],
            null)
      ],
      [])
};

final _memberSymbolMap = null;

initializeReflectable() {
  if (!isTransformed) {
    throw new UnsupportedError(
        "The transformed code is running with the untransformed "
        "reflectable package. Remember to set your package-root to "
        "'build/.../packages'.");
  }
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
